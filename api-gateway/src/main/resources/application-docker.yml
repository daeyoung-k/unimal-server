server:
  port: 8080

spring:
  config:
    activate:
      on-profile: docker
  application:
    name: api-gateway-server
  cloud:
    gateway:
      routes:
        - id: user-service-public
          uri: ${USER_SERVICE_URI:http://localhost}:${USER_SERVICE_PORT:8081}
          predicates:
            - Path=/user/auth/{segment:login|signup}/**

        - id: user-service-private
          uri: ${USER_SERVICE_URI:http://localhost}:${USER_SERVICE_PORT:8081}
          predicates:
            - Path=/user/auth/{segment:token-reissue|logout|withdrawal}
          filters:
            - name: TokenFilter

        - id: user-service-private
          uri: ${USER_SERVICE_URI:http://localhost}:${USER_SERVICE_PORT:8081}
          predicates:
            - Path=/user/member/**
          filters:
            - name: TokenFilter

        - id: map-service
          uri: ${MAP_SERVICE_URI:http://localhost}:${MAP_SERVICE_PORT:8082}
          predicates:
            - Path=/map/**

        - id: board-service
          uri: ${BOARD_SERVICE_URI:http://localhost}:${BOARD_SERVICE_PORT:8083}
          predicates:
            - Path=/board/**

        - id: photo-service
          uri: ${PHOTO_SERVICE_URI:http://localhost}:${PHOTO_SERVICE_PORT:8084}
          predicates:
            - Path=/photo/**

  jackson:
    time-zone: Asia/Seoul

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database: postgresql
    defer-datasource-initialization: true
    properties:
      hibernate:
        default_schema: ${DATABASE_USER_SCHEMA}

  sql:
    init:
      mode: always
      continue-on-error: true

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    dbcp2:
      default-schema: ${DATABASE_USER_SCHEMA}

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}

custom:
  jwt:
    secret-key: ${JWT_SECRET_KEY}
