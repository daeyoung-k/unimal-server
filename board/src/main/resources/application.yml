server:
  port: ${BOARD_SERVICE_PORT}
  servlet:
    context-path: /board

spring:
  main:
    allow-bean-definition-overriding: true
  config:
    activate:
      on-profile: local
  application:
    name: board-server

  jackson:
    time-zone: Asia/Seoul

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    database: postgresql
    defer-datasource-initialization: true
    properties:
      hibernate:
        default_schema: ${DATABASE_BOARD_SCHEMA}

  sql:
    init:
      mode: always
      continue-on-error: true

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    dbcp2:
      default-schema: ${DATABASE_BOARD_SCHEMA}

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}

  kafka:
    bootstrap-servers: localhost:9091,localhost:9092,localhost:9093

    consumer:
      group-id: unimal-board-group
      auto-offset-reset: latest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    listener:
      missing-topics-fatal: false

grpc:
  client:
    photo-grpc:
      address: static://localhost:50084
      negotiation-type: plaintext
    map-grpc:
      address: static://localhost:50082
      negotiation-type: plaintext


etc:
  base-url: ${BASE_URI}:${API_GATEWAY_SERVICE_PORT}